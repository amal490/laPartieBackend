
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 */

export type Users = {
  userId: number
  name: string
  username: string
  email: string
  password: string
  roleId: number
  code: number
  status: Status
}

/**
 * Model Privilagies
 */

export type Privilagies = {
  roleId: number
  role: Role
}

/**
 * Model Cart
 */

export type Cart = {
  cartId: number
  quantity: number
  validate: Validate
  userId: number
  productId: number
}

/**
 * Model Product
 */

export type Product = {
  productId: number
  name: string
  price: number
  rating: number
  description: string
  codeProd: string
  quantity: number
  subCategoryId: number
}

/**
 * Model DefaultImage
 */

export type DefaultImage = {
  defaultImageId: number
  url: string
  productIdForDefaultImage: number
}

/**
 * Model Images
 */

export type Images = {
  imagesId: number
  url: string
  productIdForImages: number
}

/**
 * Model SubCategory
 */

export type SubCategory = {
  subCategoryId: number
  name: string
  categoryId: number
}

/**
 * Model Category
 */

export type Category = {
  categoryId: number
  name: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Status: {
  notActive: 'notActive',
  active: 'active',
  blocked: 'blocked'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Role: {
  INTERNAUTE: 'INTERNAUTE',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Validate: {
  VALID: 'VALID',
  NOTVALID: 'NOTVALID'
};

export type Validate = (typeof Validate)[keyof typeof Validate]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.privilagies`: Exposes CRUD operations for the **Privilagies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Privilagies
    * const privilagies = await prisma.privilagies.findMany()
    * ```
    */
  get privilagies(): Prisma.PrivilagiesDelegate<GlobalReject>;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.defaultImage`: Exposes CRUD operations for the **DefaultImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DefaultImages
    * const defaultImages = await prisma.defaultImage.findMany()
    * ```
    */
  get defaultImage(): Prisma.DefaultImageDelegate<GlobalReject>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **Images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.ImagesDelegate<GlobalReject>;

  /**
   * `prisma.subCategory`: Exposes CRUD operations for the **SubCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategories
    * const subCategories = await prisma.subCategory.findMany()
    * ```
    */
  get subCategory(): Prisma.SubCategoryDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.19.0
   * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Privilagies: 'Privilagies',
    Cart: 'Cart',
    Product: 'Product',
    DefaultImage: 'DefaultImage',
    Images: 'Images',
    SubCategory: 'SubCategory',
    Category: 'Category'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Users
   */


  export type AggregateUsers = {
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userId: number
    roleId: number
    code: number
  }

  export type UsersSumAggregateOutputType = {
    userId: number
    roleId: number
    code: number
  }

  export type UsersMinAggregateOutputType = {
    userId: number
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    roleId: number
    code: number
    status: Status | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: number
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    roleId: number
    code: number
    status: Status | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    name: number | null
    username: number | null
    email: number | null
    password: number | null
    roleId: number
    code: number
    status: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userId?: true
    roleId?: true
    code?: true
  }

  export type UsersSumAggregateInputType = {
    userId?: true
    roleId?: true
    code?: true
  }

  export type UsersMinAggregateInputType = {
    userId?: true
    name?: true
    username?: true
    email?: true
    password?: true
    roleId?: true
    code?: true
    status?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    name?: true
    username?: true
    email?: true
    password?: true
    roleId?: true
    code?: true
    status?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    name?: true
    username?: true
    email?: true
    password?: true
    roleId?: true
    code?: true
    status?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }



  export type UsersSelect = {
    userId?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    roleId?: boolean
    code?: boolean
    status?: boolean
    role?: boolean | PrivilagiesArgs
    cart?: boolean | CartFindManyArgs
  }

  export type UsersInclude = {
    role?: boolean | PrivilagiesArgs
    cart?: boolean | CartFindManyArgs
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'role'
        ? PrivilagiesGetPayload<S['include'][P]> :
        P extends 'cart'
        ? Array < CartGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Users ?Users [P]
  : 
          P extends 'role'
        ? PrivilagiesGetPayload<S['select'][P]> :
        P extends 'cart'
        ? Array < CartGetPayload<S['select'][P]>>  : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends PrivilagiesArgs = {}>(args?: Subset<T, PrivilagiesArgs>): CheckSelect<T, Prisma__PrivilagiesClient<Privilagies | null >, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T> | null >>;

    cart<T extends CartFindManyArgs = {}>(args?: Subset<T, CartFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cart>>, PrismaPromise<Array<CartGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UsersInclude | null
  }



  /**
   * Model Privilagies
   */


  export type AggregatePrivilagies = {
    count: PrivilagiesCountAggregateOutputType | null
    avg: PrivilagiesAvgAggregateOutputType | null
    sum: PrivilagiesSumAggregateOutputType | null
    min: PrivilagiesMinAggregateOutputType | null
    max: PrivilagiesMaxAggregateOutputType | null
  }

  export type PrivilagiesAvgAggregateOutputType = {
    roleId: number
  }

  export type PrivilagiesSumAggregateOutputType = {
    roleId: number
  }

  export type PrivilagiesMinAggregateOutputType = {
    roleId: number
    role: Role | null
  }

  export type PrivilagiesMaxAggregateOutputType = {
    roleId: number
    role: Role | null
  }

  export type PrivilagiesCountAggregateOutputType = {
    roleId: number
    role: number | null
    _all: number
  }


  export type PrivilagiesAvgAggregateInputType = {
    roleId?: true
  }

  export type PrivilagiesSumAggregateInputType = {
    roleId?: true
  }

  export type PrivilagiesMinAggregateInputType = {
    roleId?: true
    role?: true
  }

  export type PrivilagiesMaxAggregateInputType = {
    roleId?: true
    role?: true
  }

  export type PrivilagiesCountAggregateInputType = {
    roleId?: true
    role?: true
    _all?: true
  }

  export type PrivilagiesAggregateArgs = {
    /**
     * Filter which Privilagies to aggregate.
    **/
    where?: PrivilagiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Privilagies to fetch.
    **/
    orderBy?: Enumerable<PrivilagiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PrivilagiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Privilagies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Privilagies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Privilagies
    **/
    count?: true | PrivilagiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PrivilagiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PrivilagiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PrivilagiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PrivilagiesMaxAggregateInputType
  }

  export type GetPrivilagiesAggregateType<T extends PrivilagiesAggregateArgs> = {
    [P in keyof T & keyof AggregatePrivilagies]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivilagies[P]>
      : GetScalarType<T[P], AggregatePrivilagies[P]>
  }



  export type PrivilagiesSelect = {
    roleId?: boolean
    role?: boolean
    user?: boolean | UsersFindManyArgs
  }

  export type PrivilagiesInclude = {
    user?: boolean | UsersFindManyArgs
  }

  export type PrivilagiesGetPayload<
    S extends boolean | null | undefined | PrivilagiesArgs,
    U = keyof S
      > = S extends true
        ? Privilagies
    : S extends undefined
    ? never
    : S extends PrivilagiesArgs | PrivilagiesFindManyArgs
    ?'include' extends U
    ? Privilagies  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? Array < UsersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Privilagies ?Privilagies [P]
  : 
          P extends 'user'
        ? Array < UsersGetPayload<S['select'][P]>>  : never
  } 
    : Privilagies
  : Privilagies


  type PrivilagiesCountArgs = Merge<
    Omit<PrivilagiesFindManyArgs, 'select' | 'include'> & {
      select?: PrivilagiesCountAggregateInputType | true
    }
  >

  export interface PrivilagiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Privilagies that matches the filter.
     * @param {PrivilagiesFindUniqueArgs} args - Arguments to find a Privilagies
     * @example
     * // Get one Privilagies
     * const privilagies = await prisma.privilagies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrivilagiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrivilagiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Privilagies'> extends True ? CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>> : CheckSelect<T, Prisma__PrivilagiesClient<Privilagies | null >, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T> | null >>

    /**
     * Find the first Privilagies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivilagiesFindFirstArgs} args - Arguments to find a Privilagies
     * @example
     * // Get one Privilagies
     * const privilagies = await prisma.privilagies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrivilagiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrivilagiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Privilagies'> extends True ? CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>> : CheckSelect<T, Prisma__PrivilagiesClient<Privilagies | null >, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T> | null >>

    /**
     * Find zero or more Privilagies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivilagiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Privilagies
     * const privilagies = await prisma.privilagies.findMany()
     * 
     * // Get first 10 Privilagies
     * const privilagies = await prisma.privilagies.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const privilagiesWithRoleIdOnly = await prisma.privilagies.findMany({ select: { roleId: true } })
     * 
    **/
    findMany<T extends PrivilagiesFindManyArgs>(
      args?: SelectSubset<T, PrivilagiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Privilagies>>, PrismaPromise<Array<PrivilagiesGetPayload<T>>>>

    /**
     * Create a Privilagies.
     * @param {PrivilagiesCreateArgs} args - Arguments to create a Privilagies.
     * @example
     * // Create one Privilagies
     * const Privilagies = await prisma.privilagies.create({
     *   data: {
     *     // ... data to create a Privilagies
     *   }
     * })
     * 
    **/
    create<T extends PrivilagiesCreateArgs>(
      args: SelectSubset<T, PrivilagiesCreateArgs>
    ): CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>>

    /**
     * Delete a Privilagies.
     * @param {PrivilagiesDeleteArgs} args - Arguments to delete one Privilagies.
     * @example
     * // Delete one Privilagies
     * const Privilagies = await prisma.privilagies.delete({
     *   where: {
     *     // ... filter to delete one Privilagies
     *   }
     * })
     * 
    **/
    delete<T extends PrivilagiesDeleteArgs>(
      args: SelectSubset<T, PrivilagiesDeleteArgs>
    ): CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>>

    /**
     * Update one Privilagies.
     * @param {PrivilagiesUpdateArgs} args - Arguments to update one Privilagies.
     * @example
     * // Update one Privilagies
     * const privilagies = await prisma.privilagies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrivilagiesUpdateArgs>(
      args: SelectSubset<T, PrivilagiesUpdateArgs>
    ): CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>>

    /**
     * Delete zero or more Privilagies.
     * @param {PrivilagiesDeleteManyArgs} args - Arguments to filter Privilagies to delete.
     * @example
     * // Delete a few Privilagies
     * const { count } = await prisma.privilagies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrivilagiesDeleteManyArgs>(
      args?: SelectSubset<T, PrivilagiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Privilagies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivilagiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Privilagies
     * const privilagies = await prisma.privilagies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrivilagiesUpdateManyArgs>(
      args: SelectSubset<T, PrivilagiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Privilagies.
     * @param {PrivilagiesUpsertArgs} args - Arguments to update or create a Privilagies.
     * @example
     * // Update or create a Privilagies
     * const privilagies = await prisma.privilagies.upsert({
     *   create: {
     *     // ... data to create a Privilagies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Privilagies we want to update
     *   }
     * })
    **/
    upsert<T extends PrivilagiesUpsertArgs>(
      args: SelectSubset<T, PrivilagiesUpsertArgs>
    ): CheckSelect<T, Prisma__PrivilagiesClient<Privilagies>, Prisma__PrivilagiesClient<PrivilagiesGetPayload<T>>>

    /**
     * Count the number of Privilagies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivilagiesCountArgs} args - Arguments to filter Privilagies to count.
     * @example
     * // Count the number of Privilagies
     * const count = await prisma.privilagies.count({
     *   where: {
     *     // ... the filter for the Privilagies we want to count
     *   }
     * })
    **/
    count<T extends PrivilagiesCountArgs>(
      args?: Subset<T, PrivilagiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivilagiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Privilagies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivilagiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivilagiesAggregateArgs>(args: Subset<T, PrivilagiesAggregateArgs>): PrismaPromise<GetPrivilagiesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Privilagies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrivilagiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UsersFindManyArgs = {}>(args?: Subset<T, UsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Privilagies findUnique
   */
  export type PrivilagiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * Throw an Error if a Privilagies can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Privilagies to fetch.
    **/
    where: PrivilagiesWhereUniqueInput
  }


  /**
   * Privilagies findFirst
   */
  export type PrivilagiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * Throw an Error if a Privilagies can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Privilagies to fetch.
    **/
    where?: PrivilagiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Privilagies to fetch.
    **/
    orderBy?: Enumerable<PrivilagiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Privilagies.
    **/
    cursor?: PrivilagiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Privilagies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Privilagies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Privilagies.
    **/
    distinct?: Enumerable<PrivilagiesScalarFieldEnum>
  }


  /**
   * Privilagies findMany
   */
  export type PrivilagiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * Filter, which Privilagies to fetch.
    **/
    where?: PrivilagiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Privilagies to fetch.
    **/
    orderBy?: Enumerable<PrivilagiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Privilagies.
    **/
    cursor?: PrivilagiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Privilagies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Privilagies.
    **/
    skip?: number
    distinct?: Enumerable<PrivilagiesScalarFieldEnum>
  }


  /**
   * Privilagies create
   */
  export type PrivilagiesCreateArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * The data needed to create a Privilagies.
    **/
    data: XOR<PrivilagiesCreateInput, PrivilagiesUncheckedCreateInput>
  }


  /**
   * Privilagies update
   */
  export type PrivilagiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * The data needed to update a Privilagies.
    **/
    data: XOR<PrivilagiesUpdateInput, PrivilagiesUncheckedUpdateInput>
    /**
     * Choose, which Privilagies to update.
    **/
    where: PrivilagiesWhereUniqueInput
  }


  /**
   * Privilagies updateMany
   */
  export type PrivilagiesUpdateManyArgs = {
    data: XOR<PrivilagiesUpdateManyMutationInput, PrivilagiesUncheckedUpdateManyInput>
    where?: PrivilagiesWhereInput
  }


  /**
   * Privilagies upsert
   */
  export type PrivilagiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * The filter to search for the Privilagies to update in case it exists.
    **/
    where: PrivilagiesWhereUniqueInput
    /**
     * In case the Privilagies found by the `where` argument doesn't exist, create a new Privilagies with this data.
    **/
    create: XOR<PrivilagiesCreateInput, PrivilagiesUncheckedCreateInput>
    /**
     * In case the Privilagies was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PrivilagiesUpdateInput, PrivilagiesUncheckedUpdateInput>
  }


  /**
   * Privilagies delete
   */
  export type PrivilagiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
    /**
     * Filter which Privilagies to delete.
    **/
    where: PrivilagiesWhereUniqueInput
  }


  /**
   * Privilagies deleteMany
   */
  export type PrivilagiesDeleteManyArgs = {
    where?: PrivilagiesWhereInput
  }


  /**
   * Privilagies without action
   */
  export type PrivilagiesArgs = {
    /**
     * Select specific fields to fetch from the Privilagies
    **/
    select?: PrivilagiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PrivilagiesInclude | null
  }



  /**
   * Model Cart
   */


  export type AggregateCart = {
    count: CartCountAggregateOutputType | null
    avg: CartAvgAggregateOutputType | null
    sum: CartSumAggregateOutputType | null
    min: CartMinAggregateOutputType | null
    max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    cartId: number
    quantity: number
    userId: number
    productId: number
  }

  export type CartSumAggregateOutputType = {
    cartId: number
    quantity: number
    userId: number
    productId: number
  }

  export type CartMinAggregateOutputType = {
    cartId: number
    quantity: number
    validate: Validate | null
    userId: number
    productId: number
  }

  export type CartMaxAggregateOutputType = {
    cartId: number
    quantity: number
    validate: Validate | null
    userId: number
    productId: number
  }

  export type CartCountAggregateOutputType = {
    cartId: number
    quantity: number
    validate: number | null
    userId: number
    productId: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    cartId?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartSumAggregateInputType = {
    cartId?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartMinAggregateInputType = {
    cartId?: true
    quantity?: true
    validate?: true
    userId?: true
    productId?: true
  }

  export type CartMaxAggregateInputType = {
    cartId?: true
    quantity?: true
    validate?: true
    userId?: true
    productId?: true
  }

  export type CartCountAggregateInputType = {
    cartId?: true
    quantity?: true
    validate?: true
    userId?: true
    productId?: true
    _all?: true
  }

  export type CartAggregateArgs = {
    /**
     * Filter which Cart to aggregate.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
    [P in keyof T & keyof AggregateCart]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }



  export type CartSelect = {
    cartId?: boolean
    quantity?: boolean
    validate?: boolean
    userId?: boolean
    productId?: boolean
    user?: boolean | UsersArgs
    product?: boolean | ProductArgs
  }

  export type CartInclude = {
    user?: boolean | UsersArgs
    product?: boolean | ProductArgs
  }

  export type CartGetPayload<
    S extends boolean | null | undefined | CartArgs,
    U = keyof S
      > = S extends true
        ? Cart
    : S extends undefined
    ? never
    : S extends CartArgs | CartFindManyArgs
    ?'include' extends U
    ? Cart  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UsersGetPayload<S['include'][P]> :
        P extends 'product'
        ? ProductGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Cart ?Cart [P]
  : 
          P extends 'user'
        ? UsersGetPayload<S['select'][P]> :
        P extends 'product'
        ? ProductGetPayload<S['select'][P]> : never
  } 
    : Cart
  : Cart


  type CartCountArgs = Merge<
    Omit<CartFindManyArgs, 'select' | 'include'> & {
      select?: CartCountAggregateInputType | true
    }
  >

  export interface CartDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cart'> extends True ? CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>> : CheckSelect<T, Prisma__CartClient<Cart | null >, Prisma__CartClient<CartGetPayload<T> | null >>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cart'> extends True ? CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>> : CheckSelect<T, Prisma__CartClient<Cart | null >, Prisma__CartClient<CartGetPayload<T> | null >>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `cartId`
     * const cartWithCartIdOnly = await prisma.cart.findMany({ select: { cartId: true } })
     * 
    **/
    findMany<T extends CartFindManyArgs>(
      args?: SelectSubset<T, CartFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cart>>, PrismaPromise<Array<CartGetPayload<T>>>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends CartCreateArgs>(
      args: SelectSubset<T, CartCreateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends CartDeleteArgs>(
      args: SelectSubset<T, CartDeleteArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartUpdateArgs>(
      args: SelectSubset<T, CartUpdateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartDeleteManyArgs>(
      args?: SelectSubset<T, CartDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartUpdateManyArgs>(
      args: SelectSubset<T, CartUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends CartUpsertArgs>(
      args: SelectSubset<T, CartUpsertArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): PrismaPromise<GetCartAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Throw an Error if a Cart can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cart to fetch.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Throw an Error if a Cart can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cart to fetch.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
    **/
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart findMany
   */
  export type CartFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter, which Carts to fetch.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart create
   */
  export type CartCreateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to create a Cart.
    **/
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }


  /**
   * Cart update
   */
  export type CartUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to update a Cart.
    **/
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs = {
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    where?: CartWhereInput
  }


  /**
   * Cart upsert
   */
  export type CartUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The filter to search for the Cart to update in case it exists.
    **/
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
    **/
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }


  /**
   * Cart delete
   */
  export type CartDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter which Cart to delete.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs = {
    where?: CartWhereInput
  }


  /**
   * Cart without action
   */
  export type CartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    count: ProductCountAggregateOutputType | null
    avg: ProductAvgAggregateOutputType | null
    sum: ProductSumAggregateOutputType | null
    min: ProductMinAggregateOutputType | null
    max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    productId: number
    price: number
    rating: number
    quantity: number
    subCategoryId: number
  }

  export type ProductSumAggregateOutputType = {
    productId: number
    price: number
    rating: number
    quantity: number
    subCategoryId: number
  }

  export type ProductMinAggregateOutputType = {
    productId: number
    name: string | null
    price: number
    rating: number
    description: string | null
    codeProd: string | null
    quantity: number
    subCategoryId: number
  }

  export type ProductMaxAggregateOutputType = {
    productId: number
    name: string | null
    price: number
    rating: number
    description: string | null
    codeProd: string | null
    quantity: number
    subCategoryId: number
  }

  export type ProductCountAggregateOutputType = {
    productId: number
    name: number | null
    price: number
    rating: number
    description: number | null
    codeProd: number | null
    quantity: number
    subCategoryId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    productId?: true
    price?: true
    rating?: true
    quantity?: true
    subCategoryId?: true
  }

  export type ProductSumAggregateInputType = {
    productId?: true
    price?: true
    rating?: true
    quantity?: true
    subCategoryId?: true
  }

  export type ProductMinAggregateInputType = {
    productId?: true
    name?: true
    price?: true
    rating?: true
    description?: true
    codeProd?: true
    quantity?: true
    subCategoryId?: true
  }

  export type ProductMaxAggregateInputType = {
    productId?: true
    name?: true
    price?: true
    rating?: true
    description?: true
    codeProd?: true
    quantity?: true
    subCategoryId?: true
  }

  export type ProductCountAggregateInputType = {
    productId?: true
    name?: true
    price?: true
    rating?: true
    description?: true
    codeProd?: true
    quantity?: true
    subCategoryId?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
    [P in keyof T & keyof AggregateProduct]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }



  export type ProductSelect = {
    productId?: boolean
    name?: boolean
    price?: boolean
    rating?: boolean
    description?: boolean
    codeProd?: boolean
    quantity?: boolean
    subCategoryId?: boolean
    defaultImage?: boolean | DefaultImageArgs
    images?: boolean | ImagesFindManyArgs
    subCategory?: boolean | SubCategoryArgs
    cart?: boolean | CartFindManyArgs
  }

  export type ProductInclude = {
    defaultImage?: boolean | DefaultImageArgs
    images?: boolean | ImagesFindManyArgs
    subCategory?: boolean | SubCategoryArgs
    cart?: boolean | CartFindManyArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'defaultImage'
        ? DefaultImageGetPayload<S['include'][P]> | null :
        P extends 'images'
        ? Array < ImagesGetPayload<S['include'][P]>>  :
        P extends 'subCategory'
        ? SubCategoryGetPayload<S['include'][P]> :
        P extends 'cart'
        ? Array < CartGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Product ?Product [P]
  : 
          P extends 'defaultImage'
        ? DefaultImageGetPayload<S['select'][P]> | null :
        P extends 'images'
        ? Array < ImagesGetPayload<S['select'][P]>>  :
        P extends 'subCategory'
        ? SubCategoryGetPayload<S['select'][P]> :
        P extends 'cart'
        ? Array < CartGetPayload<S['select'][P]>>  : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `productId`
     * const productWithProductIdOnly = await prisma.product.findMany({ select: { productId: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    defaultImage<T extends DefaultImageArgs = {}>(args?: Subset<T, DefaultImageArgs>): CheckSelect<T, Prisma__DefaultImageClient<DefaultImage | null >, Prisma__DefaultImageClient<DefaultImageGetPayload<T> | null >>;

    images<T extends ImagesFindManyArgs = {}>(args?: Subset<T, ImagesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Images>>, PrismaPromise<Array<ImagesGetPayload<T>>>>;

    subCategory<T extends SubCategoryArgs = {}>(args?: Subset<T, SubCategoryArgs>): CheckSelect<T, Prisma__SubCategoryClient<SubCategory | null >, Prisma__SubCategoryClient<SubCategoryGetPayload<T> | null >>;

    cart<T extends CartFindManyArgs = {}>(args?: Subset<T, CartFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cart>>, PrismaPromise<Array<CartGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProductInclude | null
  }



  /**
   * Model DefaultImage
   */


  export type AggregateDefaultImage = {
    count: DefaultImageCountAggregateOutputType | null
    avg: DefaultImageAvgAggregateOutputType | null
    sum: DefaultImageSumAggregateOutputType | null
    min: DefaultImageMinAggregateOutputType | null
    max: DefaultImageMaxAggregateOutputType | null
  }

  export type DefaultImageAvgAggregateOutputType = {
    defaultImageId: number
    productIdForDefaultImage: number
  }

  export type DefaultImageSumAggregateOutputType = {
    defaultImageId: number
    productIdForDefaultImage: number
  }

  export type DefaultImageMinAggregateOutputType = {
    defaultImageId: number
    url: string | null
    productIdForDefaultImage: number
  }

  export type DefaultImageMaxAggregateOutputType = {
    defaultImageId: number
    url: string | null
    productIdForDefaultImage: number
  }

  export type DefaultImageCountAggregateOutputType = {
    defaultImageId: number
    url: number | null
    productIdForDefaultImage: number
    _all: number
  }


  export type DefaultImageAvgAggregateInputType = {
    defaultImageId?: true
    productIdForDefaultImage?: true
  }

  export type DefaultImageSumAggregateInputType = {
    defaultImageId?: true
    productIdForDefaultImage?: true
  }

  export type DefaultImageMinAggregateInputType = {
    defaultImageId?: true
    url?: true
    productIdForDefaultImage?: true
  }

  export type DefaultImageMaxAggregateInputType = {
    defaultImageId?: true
    url?: true
    productIdForDefaultImage?: true
  }

  export type DefaultImageCountAggregateInputType = {
    defaultImageId?: true
    url?: true
    productIdForDefaultImage?: true
    _all?: true
  }

  export type DefaultImageAggregateArgs = {
    /**
     * Filter which DefaultImage to aggregate.
    **/
    where?: DefaultImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultImages to fetch.
    **/
    orderBy?: Enumerable<DefaultImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: DefaultImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultImages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultImages.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DefaultImages
    **/
    count?: true | DefaultImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DefaultImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DefaultImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DefaultImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DefaultImageMaxAggregateInputType
  }

  export type GetDefaultImageAggregateType<T extends DefaultImageAggregateArgs> = {
    [P in keyof T & keyof AggregateDefaultImage]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefaultImage[P]>
      : GetScalarType<T[P], AggregateDefaultImage[P]>
  }



  export type DefaultImageSelect = {
    defaultImageId?: boolean
    url?: boolean
    productIdForDefaultImage?: boolean
    product?: boolean | ProductArgs
  }

  export type DefaultImageInclude = {
    product?: boolean | ProductArgs
  }

  export type DefaultImageGetPayload<
    S extends boolean | null | undefined | DefaultImageArgs,
    U = keyof S
      > = S extends true
        ? DefaultImage
    : S extends undefined
    ? never
    : S extends DefaultImageArgs | DefaultImageFindManyArgs
    ?'include' extends U
    ? DefaultImage  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? ProductGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DefaultImage ?DefaultImage [P]
  : 
          P extends 'product'
        ? ProductGetPayload<S['select'][P]> : never
  } 
    : DefaultImage
  : DefaultImage


  type DefaultImageCountArgs = Merge<
    Omit<DefaultImageFindManyArgs, 'select' | 'include'> & {
      select?: DefaultImageCountAggregateInputType | true
    }
  >

  export interface DefaultImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DefaultImage that matches the filter.
     * @param {DefaultImageFindUniqueArgs} args - Arguments to find a DefaultImage
     * @example
     * // Get one DefaultImage
     * const defaultImage = await prisma.defaultImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DefaultImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DefaultImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DefaultImage'> extends True ? CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>> : CheckSelect<T, Prisma__DefaultImageClient<DefaultImage | null >, Prisma__DefaultImageClient<DefaultImageGetPayload<T> | null >>

    /**
     * Find the first DefaultImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultImageFindFirstArgs} args - Arguments to find a DefaultImage
     * @example
     * // Get one DefaultImage
     * const defaultImage = await prisma.defaultImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DefaultImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DefaultImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DefaultImage'> extends True ? CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>> : CheckSelect<T, Prisma__DefaultImageClient<DefaultImage | null >, Prisma__DefaultImageClient<DefaultImageGetPayload<T> | null >>

    /**
     * Find zero or more DefaultImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DefaultImages
     * const defaultImages = await prisma.defaultImage.findMany()
     * 
     * // Get first 10 DefaultImages
     * const defaultImages = await prisma.defaultImage.findMany({ take: 10 })
     * 
     * // Only select the `defaultImageId`
     * const defaultImageWithDefaultImageIdOnly = await prisma.defaultImage.findMany({ select: { defaultImageId: true } })
     * 
    **/
    findMany<T extends DefaultImageFindManyArgs>(
      args?: SelectSubset<T, DefaultImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DefaultImage>>, PrismaPromise<Array<DefaultImageGetPayload<T>>>>

    /**
     * Create a DefaultImage.
     * @param {DefaultImageCreateArgs} args - Arguments to create a DefaultImage.
     * @example
     * // Create one DefaultImage
     * const DefaultImage = await prisma.defaultImage.create({
     *   data: {
     *     // ... data to create a DefaultImage
     *   }
     * })
     * 
    **/
    create<T extends DefaultImageCreateArgs>(
      args: SelectSubset<T, DefaultImageCreateArgs>
    ): CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>>

    /**
     * Delete a DefaultImage.
     * @param {DefaultImageDeleteArgs} args - Arguments to delete one DefaultImage.
     * @example
     * // Delete one DefaultImage
     * const DefaultImage = await prisma.defaultImage.delete({
     *   where: {
     *     // ... filter to delete one DefaultImage
     *   }
     * })
     * 
    **/
    delete<T extends DefaultImageDeleteArgs>(
      args: SelectSubset<T, DefaultImageDeleteArgs>
    ): CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>>

    /**
     * Update one DefaultImage.
     * @param {DefaultImageUpdateArgs} args - Arguments to update one DefaultImage.
     * @example
     * // Update one DefaultImage
     * const defaultImage = await prisma.defaultImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DefaultImageUpdateArgs>(
      args: SelectSubset<T, DefaultImageUpdateArgs>
    ): CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>>

    /**
     * Delete zero or more DefaultImages.
     * @param {DefaultImageDeleteManyArgs} args - Arguments to filter DefaultImages to delete.
     * @example
     * // Delete a few DefaultImages
     * const { count } = await prisma.defaultImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DefaultImageDeleteManyArgs>(
      args?: SelectSubset<T, DefaultImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DefaultImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DefaultImages
     * const defaultImage = await prisma.defaultImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DefaultImageUpdateManyArgs>(
      args: SelectSubset<T, DefaultImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DefaultImage.
     * @param {DefaultImageUpsertArgs} args - Arguments to update or create a DefaultImage.
     * @example
     * // Update or create a DefaultImage
     * const defaultImage = await prisma.defaultImage.upsert({
     *   create: {
     *     // ... data to create a DefaultImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DefaultImage we want to update
     *   }
     * })
    **/
    upsert<T extends DefaultImageUpsertArgs>(
      args: SelectSubset<T, DefaultImageUpsertArgs>
    ): CheckSelect<T, Prisma__DefaultImageClient<DefaultImage>, Prisma__DefaultImageClient<DefaultImageGetPayload<T>>>

    /**
     * Count the number of DefaultImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultImageCountArgs} args - Arguments to filter DefaultImages to count.
     * @example
     * // Count the number of DefaultImages
     * const count = await prisma.defaultImage.count({
     *   where: {
     *     // ... the filter for the DefaultImages we want to count
     *   }
     * })
    **/
    count<T extends DefaultImageCountArgs>(
      args?: Subset<T, DefaultImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefaultImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DefaultImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefaultImageAggregateArgs>(args: Subset<T, DefaultImageAggregateArgs>): PrismaPromise<GetDefaultImageAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for DefaultImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DefaultImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DefaultImage findUnique
   */
  export type DefaultImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * Throw an Error if a DefaultImage can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DefaultImage to fetch.
    **/
    where: DefaultImageWhereUniqueInput
  }


  /**
   * DefaultImage findFirst
   */
  export type DefaultImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * Throw an Error if a DefaultImage can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DefaultImage to fetch.
    **/
    where?: DefaultImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultImages to fetch.
    **/
    orderBy?: Enumerable<DefaultImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefaultImages.
    **/
    cursor?: DefaultImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultImages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultImages.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefaultImages.
    **/
    distinct?: Enumerable<DefaultImageScalarFieldEnum>
  }


  /**
   * DefaultImage findMany
   */
  export type DefaultImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * Filter, which DefaultImages to fetch.
    **/
    where?: DefaultImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultImages to fetch.
    **/
    orderBy?: Enumerable<DefaultImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DefaultImages.
    **/
    cursor?: DefaultImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultImages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultImages.
    **/
    skip?: number
    distinct?: Enumerable<DefaultImageScalarFieldEnum>
  }


  /**
   * DefaultImage create
   */
  export type DefaultImageCreateArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * The data needed to create a DefaultImage.
    **/
    data: XOR<DefaultImageCreateInput, DefaultImageUncheckedCreateInput>
  }


  /**
   * DefaultImage update
   */
  export type DefaultImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * The data needed to update a DefaultImage.
    **/
    data: XOR<DefaultImageUpdateInput, DefaultImageUncheckedUpdateInput>
    /**
     * Choose, which DefaultImage to update.
    **/
    where: DefaultImageWhereUniqueInput
  }


  /**
   * DefaultImage updateMany
   */
  export type DefaultImageUpdateManyArgs = {
    data: XOR<DefaultImageUpdateManyMutationInput, DefaultImageUncheckedUpdateManyInput>
    where?: DefaultImageWhereInput
  }


  /**
   * DefaultImage upsert
   */
  export type DefaultImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * The filter to search for the DefaultImage to update in case it exists.
    **/
    where: DefaultImageWhereUniqueInput
    /**
     * In case the DefaultImage found by the `where` argument doesn't exist, create a new DefaultImage with this data.
    **/
    create: XOR<DefaultImageCreateInput, DefaultImageUncheckedCreateInput>
    /**
     * In case the DefaultImage was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<DefaultImageUpdateInput, DefaultImageUncheckedUpdateInput>
  }


  /**
   * DefaultImage delete
   */
  export type DefaultImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
    /**
     * Filter which DefaultImage to delete.
    **/
    where: DefaultImageWhereUniqueInput
  }


  /**
   * DefaultImage deleteMany
   */
  export type DefaultImageDeleteManyArgs = {
    where?: DefaultImageWhereInput
  }


  /**
   * DefaultImage without action
   */
  export type DefaultImageArgs = {
    /**
     * Select specific fields to fetch from the DefaultImage
    **/
    select?: DefaultImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DefaultImageInclude | null
  }



  /**
   * Model Images
   */


  export type AggregateImages = {
    count: ImagesCountAggregateOutputType | null
    avg: ImagesAvgAggregateOutputType | null
    sum: ImagesSumAggregateOutputType | null
    min: ImagesMinAggregateOutputType | null
    max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesAvgAggregateOutputType = {
    imagesId: number
    productIdForImages: number
  }

  export type ImagesSumAggregateOutputType = {
    imagesId: number
    productIdForImages: number
  }

  export type ImagesMinAggregateOutputType = {
    imagesId: number
    url: string | null
    productIdForImages: number
  }

  export type ImagesMaxAggregateOutputType = {
    imagesId: number
    url: string | null
    productIdForImages: number
  }

  export type ImagesCountAggregateOutputType = {
    imagesId: number
    url: number | null
    productIdForImages: number
    _all: number
  }


  export type ImagesAvgAggregateInputType = {
    imagesId?: true
    productIdForImages?: true
  }

  export type ImagesSumAggregateInputType = {
    imagesId?: true
    productIdForImages?: true
  }

  export type ImagesMinAggregateInputType = {
    imagesId?: true
    url?: true
    productIdForImages?: true
  }

  export type ImagesMaxAggregateInputType = {
    imagesId?: true
    url?: true
    productIdForImages?: true
  }

  export type ImagesCountAggregateInputType = {
    imagesId?: true
    url?: true
    productIdForImages?: true
    _all?: true
  }

  export type ImagesAggregateArgs = {
    /**
     * Filter which Images to aggregate.
    **/
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ImagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ImagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
    [P in keyof T & keyof AggregateImages]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }



  export type ImagesSelect = {
    imagesId?: boolean
    url?: boolean
    productIdForImages?: boolean
    products?: boolean | ProductArgs
  }

  export type ImagesInclude = {
    products?: boolean | ProductArgs
  }

  export type ImagesGetPayload<
    S extends boolean | null | undefined | ImagesArgs,
    U = keyof S
      > = S extends true
        ? Images
    : S extends undefined
    ? never
    : S extends ImagesArgs | ImagesFindManyArgs
    ?'include' extends U
    ? Images  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'products'
        ? ProductGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Images ?Images [P]
  : 
          P extends 'products'
        ? ProductGetPayload<S['select'][P]> : never
  } 
    : Images
  : Images


  type ImagesCountArgs = Merge<
    Omit<ImagesFindManyArgs, 'select' | 'include'> & {
      select?: ImagesCountAggregateInputType | true
    }
  >

  export interface ImagesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Images that matches the filter.
     * @param {ImagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Images'> extends True ? CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>> : CheckSelect<T, Prisma__ImagesClient<Images | null >, Prisma__ImagesClient<ImagesGetPayload<T> | null >>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Images'> extends True ? CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>> : CheckSelect<T, Prisma__ImagesClient<Images | null >, Prisma__ImagesClient<ImagesGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `imagesId`
     * const imagesWithImagesIdOnly = await prisma.images.findMany({ select: { imagesId: true } })
     * 
    **/
    findMany<T extends ImagesFindManyArgs>(
      args?: SelectSubset<T, ImagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Images>>, PrismaPromise<Array<ImagesGetPayload<T>>>>

    /**
     * Create a Images.
     * @param {ImagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends ImagesCreateArgs>(
      args: SelectSubset<T, ImagesCreateArgs>
    ): CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>>

    /**
     * Delete a Images.
     * @param {ImagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends ImagesDeleteArgs>(
      args: SelectSubset<T, ImagesDeleteArgs>
    ): CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>>

    /**
     * Update one Images.
     * @param {ImagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImagesUpdateArgs>(
      args: SelectSubset<T, ImagesUpdateArgs>
    ): CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImagesDeleteManyArgs>(
      args?: SelectSubset<T, ImagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImagesUpdateManyArgs>(
      args: SelectSubset<T, ImagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {ImagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends ImagesUpsertArgs>(
      args: SelectSubset<T, ImagesUpsertArgs>
    ): CheckSelect<T, Prisma__ImagesClient<Images>, Prisma__ImagesClient<ImagesGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImagesCountArgs>(
      args?: Subset<T, ImagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): PrismaPromise<GetImagesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImagesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Images findUnique
   */
  export type ImagesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * Throw an Error if a Images can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Images to fetch.
    **/
    where: ImagesWhereUniqueInput
  }


  /**
   * Images findFirst
   */
  export type ImagesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * Throw an Error if a Images can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Images to fetch.
    **/
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
    **/
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
    **/
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * Images findMany
   */
  export type ImagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * Filter, which Images to fetch.
    **/
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImagesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
    **/
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * Images create
   */
  export type ImagesCreateArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * The data needed to create a Images.
    **/
    data: XOR<ImagesCreateInput, ImagesUncheckedCreateInput>
  }


  /**
   * Images update
   */
  export type ImagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * The data needed to update a Images.
    **/
    data: XOR<ImagesUpdateInput, ImagesUncheckedUpdateInput>
    /**
     * Choose, which Images to update.
    **/
    where: ImagesWhereUniqueInput
  }


  /**
   * Images updateMany
   */
  export type ImagesUpdateManyArgs = {
    data: XOR<ImagesUpdateManyMutationInput, ImagesUncheckedUpdateManyInput>
    where?: ImagesWhereInput
  }


  /**
   * Images upsert
   */
  export type ImagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * The filter to search for the Images to update in case it exists.
    **/
    where: ImagesWhereUniqueInput
    /**
     * In case the Images found by the `where` argument doesn't exist, create a new Images with this data.
    **/
    create: XOR<ImagesCreateInput, ImagesUncheckedCreateInput>
    /**
     * In case the Images was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ImagesUpdateInput, ImagesUncheckedUpdateInput>
  }


  /**
   * Images delete
   */
  export type ImagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
    /**
     * Filter which Images to delete.
    **/
    where: ImagesWhereUniqueInput
  }


  /**
   * Images deleteMany
   */
  export type ImagesDeleteManyArgs = {
    where?: ImagesWhereInput
  }


  /**
   * Images without action
   */
  export type ImagesArgs = {
    /**
     * Select specific fields to fetch from the Images
    **/
    select?: ImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImagesInclude | null
  }



  /**
   * Model SubCategory
   */


  export type AggregateSubCategory = {
    count: SubCategoryCountAggregateOutputType | null
    avg: SubCategoryAvgAggregateOutputType | null
    sum: SubCategorySumAggregateOutputType | null
    min: SubCategoryMinAggregateOutputType | null
    max: SubCategoryMaxAggregateOutputType | null
  }

  export type SubCategoryAvgAggregateOutputType = {
    subCategoryId: number
    categoryId: number
  }

  export type SubCategorySumAggregateOutputType = {
    subCategoryId: number
    categoryId: number
  }

  export type SubCategoryMinAggregateOutputType = {
    subCategoryId: number
    name: string | null
    categoryId: number
  }

  export type SubCategoryMaxAggregateOutputType = {
    subCategoryId: number
    name: string | null
    categoryId: number
  }

  export type SubCategoryCountAggregateOutputType = {
    subCategoryId: number
    name: number | null
    categoryId: number
    _all: number
  }


  export type SubCategoryAvgAggregateInputType = {
    subCategoryId?: true
    categoryId?: true
  }

  export type SubCategorySumAggregateInputType = {
    subCategoryId?: true
    categoryId?: true
  }

  export type SubCategoryMinAggregateInputType = {
    subCategoryId?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryMaxAggregateInputType = {
    subCategoryId?: true
    name?: true
    categoryId?: true
  }

  export type SubCategoryCountAggregateInputType = {
    subCategoryId?: true
    name?: true
    categoryId?: true
    _all?: true
  }

  export type SubCategoryAggregateArgs = {
    /**
     * Filter which SubCategory to aggregate.
    **/
    where?: SubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
    **/
    orderBy?: Enumerable<SubCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubCategories
    **/
    count?: true | SubCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SubCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SubCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SubCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SubCategoryMaxAggregateInputType
  }

  export type GetSubCategoryAggregateType<T extends SubCategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateSubCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategory[P]>
      : GetScalarType<T[P], AggregateSubCategory[P]>
  }



  export type SubCategorySelect = {
    subCategoryId?: boolean
    name?: boolean
    products?: boolean | ProductFindManyArgs
    categoryId?: boolean
    category?: boolean | CategoryArgs
  }

  export type SubCategoryInclude = {
    products?: boolean | ProductFindManyArgs
    category?: boolean | CategoryArgs
  }

  export type SubCategoryGetPayload<
    S extends boolean | null | undefined | SubCategoryArgs,
    U = keyof S
      > = S extends true
        ? SubCategory
    : S extends undefined
    ? never
    : S extends SubCategoryArgs | SubCategoryFindManyArgs
    ?'include' extends U
    ? SubCategory  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'products'
        ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends 'category'
        ? CategoryGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SubCategory ?SubCategory [P]
  : 
          P extends 'products'
        ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends 'category'
        ? CategoryGetPayload<S['select'][P]> : never
  } 
    : SubCategory
  : SubCategory


  type SubCategoryCountArgs = Merge<
    Omit<SubCategoryFindManyArgs, 'select' | 'include'> & {
      select?: SubCategoryCountAggregateInputType | true
    }
  >

  export interface SubCategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SubCategory that matches the filter.
     * @param {SubCategoryFindUniqueArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SubCategory'> extends True ? CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>> : CheckSelect<T, Prisma__SubCategoryClient<SubCategory | null >, Prisma__SubCategoryClient<SubCategoryGetPayload<T> | null >>

    /**
     * Find the first SubCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryFindFirstArgs} args - Arguments to find a SubCategory
     * @example
     * // Get one SubCategory
     * const subCategory = await prisma.subCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SubCategory'> extends True ? CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>> : CheckSelect<T, Prisma__SubCategoryClient<SubCategory | null >, Prisma__SubCategoryClient<SubCategoryGetPayload<T> | null >>

    /**
     * Find zero or more SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategories
     * const subCategories = await prisma.subCategory.findMany()
     * 
     * // Get first 10 SubCategories
     * const subCategories = await prisma.subCategory.findMany({ take: 10 })
     * 
     * // Only select the `subCategoryId`
     * const subCategoryWithSubCategoryIdOnly = await prisma.subCategory.findMany({ select: { subCategoryId: true } })
     * 
    **/
    findMany<T extends SubCategoryFindManyArgs>(
      args?: SelectSubset<T, SubCategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SubCategory>>, PrismaPromise<Array<SubCategoryGetPayload<T>>>>

    /**
     * Create a SubCategory.
     * @param {SubCategoryCreateArgs} args - Arguments to create a SubCategory.
     * @example
     * // Create one SubCategory
     * const SubCategory = await prisma.subCategory.create({
     *   data: {
     *     // ... data to create a SubCategory
     *   }
     * })
     * 
    **/
    create<T extends SubCategoryCreateArgs>(
      args: SelectSubset<T, SubCategoryCreateArgs>
    ): CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>>

    /**
     * Delete a SubCategory.
     * @param {SubCategoryDeleteArgs} args - Arguments to delete one SubCategory.
     * @example
     * // Delete one SubCategory
     * const SubCategory = await prisma.subCategory.delete({
     *   where: {
     *     // ... filter to delete one SubCategory
     *   }
     * })
     * 
    **/
    delete<T extends SubCategoryDeleteArgs>(
      args: SelectSubset<T, SubCategoryDeleteArgs>
    ): CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>>

    /**
     * Update one SubCategory.
     * @param {SubCategoryUpdateArgs} args - Arguments to update one SubCategory.
     * @example
     * // Update one SubCategory
     * const subCategory = await prisma.subCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubCategoryUpdateArgs>(
      args: SelectSubset<T, SubCategoryUpdateArgs>
    ): CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>>

    /**
     * Delete zero or more SubCategories.
     * @param {SubCategoryDeleteManyArgs} args - Arguments to filter SubCategories to delete.
     * @example
     * // Delete a few SubCategories
     * const { count } = await prisma.subCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubCategoryDeleteManyArgs>(
      args?: SelectSubset<T, SubCategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategories
     * const subCategory = await prisma.subCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubCategoryUpdateManyArgs>(
      args: SelectSubset<T, SubCategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCategory.
     * @param {SubCategoryUpsertArgs} args - Arguments to update or create a SubCategory.
     * @example
     * // Update or create a SubCategory
     * const subCategory = await prisma.subCategory.upsert({
     *   create: {
     *     // ... data to create a SubCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategory we want to update
     *   }
     * })
    **/
    upsert<T extends SubCategoryUpsertArgs>(
      args: SelectSubset<T, SubCategoryUpsertArgs>
    ): CheckSelect<T, Prisma__SubCategoryClient<SubCategory>, Prisma__SubCategoryClient<SubCategoryGetPayload<T>>>

    /**
     * Count the number of SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryCountArgs} args - Arguments to filter SubCategories to count.
     * @example
     * // Count the number of SubCategories
     * const count = await prisma.subCategory.count({
     *   where: {
     *     // ... the filter for the SubCategories we want to count
     *   }
     * })
    **/
    count<T extends SubCategoryCountArgs>(
      args?: Subset<T, SubCategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoryAggregateArgs>(args: Subset<T, SubCategoryAggregateArgs>): PrismaPromise<GetSubCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for SubCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubCategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductFindManyArgs = {}>(args?: Subset<T, ProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>;

    category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SubCategory findUnique
   */
  export type SubCategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * Throw an Error if a SubCategory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SubCategory to fetch.
    **/
    where: SubCategoryWhereUniqueInput
  }


  /**
   * SubCategory findFirst
   */
  export type SubCategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * Throw an Error if a SubCategory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SubCategory to fetch.
    **/
    where?: SubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
    **/
    orderBy?: Enumerable<SubCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategories.
    **/
    cursor?: SubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategories.
    **/
    distinct?: Enumerable<SubCategoryScalarFieldEnum>
  }


  /**
   * SubCategory findMany
   */
  export type SubCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * Filter, which SubCategories to fetch.
    **/
    where?: SubCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
    **/
    orderBy?: Enumerable<SubCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubCategories.
    **/
    cursor?: SubCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
    **/
    skip?: number
    distinct?: Enumerable<SubCategoryScalarFieldEnum>
  }


  /**
   * SubCategory create
   */
  export type SubCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * The data needed to create a SubCategory.
    **/
    data: XOR<SubCategoryCreateInput, SubCategoryUncheckedCreateInput>
  }


  /**
   * SubCategory update
   */
  export type SubCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * The data needed to update a SubCategory.
    **/
    data: XOR<SubCategoryUpdateInput, SubCategoryUncheckedUpdateInput>
    /**
     * Choose, which SubCategory to update.
    **/
    where: SubCategoryWhereUniqueInput
  }


  /**
   * SubCategory updateMany
   */
  export type SubCategoryUpdateManyArgs = {
    data: XOR<SubCategoryUpdateManyMutationInput, SubCategoryUncheckedUpdateManyInput>
    where?: SubCategoryWhereInput
  }


  /**
   * SubCategory upsert
   */
  export type SubCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * The filter to search for the SubCategory to update in case it exists.
    **/
    where: SubCategoryWhereUniqueInput
    /**
     * In case the SubCategory found by the `where` argument doesn't exist, create a new SubCategory with this data.
    **/
    create: XOR<SubCategoryCreateInput, SubCategoryUncheckedCreateInput>
    /**
     * In case the SubCategory was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<SubCategoryUpdateInput, SubCategoryUncheckedUpdateInput>
  }


  /**
   * SubCategory delete
   */
  export type SubCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
    /**
     * Filter which SubCategory to delete.
    **/
    where: SubCategoryWhereUniqueInput
  }


  /**
   * SubCategory deleteMany
   */
  export type SubCategoryDeleteManyArgs = {
    where?: SubCategoryWhereInput
  }


  /**
   * SubCategory without action
   */
  export type SubCategoryArgs = {
    /**
     * Select specific fields to fetch from the SubCategory
    **/
    select?: SubCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubCategoryInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    categoryId: number
  }

  export type CategorySumAggregateOutputType = {
    categoryId: number
  }

  export type CategoryMinAggregateOutputType = {
    categoryId: number
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    categoryId: number
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    categoryId: number
    name: number | null
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    categoryId?: true
  }

  export type CategorySumAggregateInputType = {
    categoryId?: true
  }

  export type CategoryMinAggregateInputType = {
    categoryId?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    categoryId?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    categoryId?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }



  export type CategorySelect = {
    categoryId?: boolean
    name?: boolean
    subCategory?: boolean | SubCategoryFindManyArgs
  }

  export type CategoryInclude = {
    subCategory?: boolean | SubCategoryFindManyArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'subCategory'
        ? Array < SubCategoryGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Category ?Category [P]
  : 
          P extends 'subCategory'
        ? Array < SubCategoryGetPayload<S['select'][P]>>  : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.findMany({ select: { categoryId: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    subCategory<T extends SubCategoryFindManyArgs = {}>(args?: Subset<T, SubCategoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SubCategory>>, PrismaPromise<Array<SubCategoryGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UsersScalarFieldEnum: {
    userId: 'userId',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password',
    roleId: 'roleId',
    code: 'code',
    status: 'status'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const PrivilagiesScalarFieldEnum: {
    roleId: 'roleId',
    role: 'role'
  };

  export type PrivilagiesScalarFieldEnum = (typeof PrivilagiesScalarFieldEnum)[keyof typeof PrivilagiesScalarFieldEnum]


  export const CartScalarFieldEnum: {
    cartId: 'cartId',
    quantity: 'quantity',
    validate: 'validate',
    userId: 'userId',
    productId: 'productId'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    productId: 'productId',
    name: 'name',
    price: 'price',
    rating: 'rating',
    description: 'description',
    codeProd: 'codeProd',
    quantity: 'quantity',
    subCategoryId: 'subCategoryId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const DefaultImageScalarFieldEnum: {
    defaultImageId: 'defaultImageId',
    url: 'url',
    productIdForDefaultImage: 'productIdForDefaultImage'
  };

  export type DefaultImageScalarFieldEnum = (typeof DefaultImageScalarFieldEnum)[keyof typeof DefaultImageScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    imagesId: 'imagesId',
    url: 'url',
    productIdForImages: 'productIdForImages'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const SubCategoryScalarFieldEnum: {
    subCategoryId: 'subCategoryId',
    name: 'name',
    categoryId: 'categoryId'
  };

  export type SubCategoryScalarFieldEnum = (typeof SubCategoryScalarFieldEnum)[keyof typeof SubCategoryScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    categoryId: 'categoryId',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    userId?: IntFilter | number
    name?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
    code?: IntFilter | number
    status?: EnumStatusFilter | Status
    role?: XOR<PrivilagiesRelationFilter, PrivilagiesWhereInput>
    cart?: CartListRelationFilter
  }

  export type UsersOrderByInput = {
    userId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    code?: SortOrder
    status?: SortOrder
  }

  export type UsersWhereUniqueInput = {
    userId?: number
  }

  export type PrivilagiesWhereInput = {
    AND?: Enumerable<PrivilagiesWhereInput>
    OR?: Enumerable<PrivilagiesWhereInput>
    NOT?: Enumerable<PrivilagiesWhereInput>
    roleId?: IntFilter | number
    role?: EnumRoleFilter | Role
    user?: UsersListRelationFilter
  }

  export type PrivilagiesOrderByInput = {
    roleId?: SortOrder
    role?: SortOrder
  }

  export type PrivilagiesWhereUniqueInput = {
    roleId?: number
  }

  export type CartWhereInput = {
    AND?: Enumerable<CartWhereInput>
    OR?: Enumerable<CartWhereInput>
    NOT?: Enumerable<CartWhereInput>
    cartId?: IntFilter | number
    quantity?: IntFilter | number
    validate?: EnumValidateFilter | Validate
    userId?: IntFilter | number
    productId?: IntFilter | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type CartOrderByInput = {
    cartId?: SortOrder
    quantity?: SortOrder
    validate?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type CartWhereUniqueInput = {
    cartId?: number
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    productId?: IntFilter | number
    name?: StringFilter | string
    price?: IntFilter | number
    rating?: IntFilter | number
    description?: StringFilter | string
    codeProd?: StringFilter | string
    quantity?: IntFilter | number
    subCategoryId?: IntFilter | number
    defaultImage?: XOR<DefaultImageRelationFilter, DefaultImageWhereInput> | null
    images?: ImagesListRelationFilter
    subCategory?: XOR<SubCategoryRelationFilter, SubCategoryWhereInput>
    cart?: CartListRelationFilter
  }

  export type ProductOrderByInput = {
    productId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    description?: SortOrder
    codeProd?: SortOrder
    quantity?: SortOrder
    subCategoryId?: SortOrder
  }

  export type ProductWhereUniqueInput = {
    productId?: number
  }

  export type DefaultImageWhereInput = {
    AND?: Enumerable<DefaultImageWhereInput>
    OR?: Enumerable<DefaultImageWhereInput>
    NOT?: Enumerable<DefaultImageWhereInput>
    defaultImageId?: IntFilter | number
    url?: StringFilter | string
    productIdForDefaultImage?: IntFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type DefaultImageOrderByInput = {
    defaultImageId?: SortOrder
    url?: SortOrder
    productIdForDefaultImage?: SortOrder
  }

  export type DefaultImageWhereUniqueInput = {
    defaultImageId?: number
  }

  export type ImagesWhereInput = {
    AND?: Enumerable<ImagesWhereInput>
    OR?: Enumerable<ImagesWhereInput>
    NOT?: Enumerable<ImagesWhereInput>
    imagesId?: IntFilter | number
    url?: StringFilter | string
    productIdForImages?: IntFilter | number
    products?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ImagesOrderByInput = {
    imagesId?: SortOrder
    url?: SortOrder
    productIdForImages?: SortOrder
  }

  export type ImagesWhereUniqueInput = {
    imagesId?: number
  }

  export type SubCategoryWhereInput = {
    AND?: Enumerable<SubCategoryWhereInput>
    OR?: Enumerable<SubCategoryWhereInput>
    NOT?: Enumerable<SubCategoryWhereInput>
    subCategoryId?: IntFilter | number
    name?: StringFilter | string
    products?: ProductListRelationFilter
    categoryId?: IntFilter | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type SubCategoryOrderByInput = {
    subCategoryId?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type SubCategoryWhereUniqueInput = {
    subCategoryId?: number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    categoryId?: IntFilter | number
    name?: StringFilter | string
    subCategory?: SubCategoryListRelationFilter
  }

  export type CategoryOrderByInput = {
    categoryId?: SortOrder
    name?: SortOrder
  }

  export type CategoryWhereUniqueInput = {
    categoryId?: number
  }

  export type UsersCreateInput = {
    name: string
    username: string
    email: string
    password: string
    code?: number
    status?: Status
    role?: PrivilagiesCreateNestedOneWithoutUserInput
    cart?: CartCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    userId?: number
    name: string
    username: string
    email: string
    password: string
    roleId?: number
    code?: number
    status?: Status
    cart?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
    role?: PrivilagiesUpdateOneRequiredWithoutUserInput
    cart?: CartUpdateManyWithoutUserInput
  }

  export type UsersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
    cart?: CartUncheckedUpdateManyWithoutUserInput
  }

  export type UsersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type UsersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type PrivilagiesCreateInput = {
    role: Role
    user?: UsersCreateNestedManyWithoutRoleInput
  }

  export type PrivilagiesUncheckedCreateInput = {
    roleId?: number
    role: Role
    user?: UsersUncheckedCreateNestedManyWithoutRoleInput
  }

  export type PrivilagiesUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
    user?: UsersUpdateManyWithoutRoleInput
  }

  export type PrivilagiesUncheckedUpdateInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
    user?: UsersUncheckedUpdateManyWithoutRoleInput
  }

  export type PrivilagiesUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type PrivilagiesUncheckedUpdateManyInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type CartCreateInput = {
    quantity: number
    validate?: Validate
    user: UsersCreateNestedOneWithoutCartInput
    product: ProductCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateInput = {
    cartId?: number
    quantity: number
    validate?: Validate
    userId: number
    productId: number
  }

  export type CartUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    user?: UsersUpdateOneRequiredWithoutCartInput
    product?: ProductUpdateOneRequiredWithoutCartInput
  }

  export type CartUncheckedUpdateInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type CartUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
  }

  export type CartUncheckedUpdateManyInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateInput = {
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    defaultImage?: DefaultImageCreateNestedOneWithoutProductInput
    images?: ImagesCreateNestedManyWithoutProductsInput
    subCategory: SubCategoryCreateNestedOneWithoutProductsInput
    cart?: CartCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    productId?: number
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    subCategoryId: number
    defaultImage?: DefaultImageUncheckedCreateNestedOneWithoutProductInput
    images?: ImagesUncheckedCreateNestedManyWithoutProductsInput
    cart?: CartUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUpdateOneWithoutProductInput
    images?: ImagesUpdateManyWithoutProductsInput
    subCategory?: SubCategoryUpdateOneRequiredWithoutProductsInput
    cart?: CartUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUncheckedUpdateOneWithoutProductInput
    images?: ImagesUncheckedUpdateManyWithoutProductsInput
    cart?: CartUncheckedUpdateManyWithoutProductInput
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUncheckedUpdateManyInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
  }

  export type DefaultImageCreateInput = {
    url: string
    product: ProductCreateNestedOneWithoutDefaultImageInput
  }

  export type DefaultImageUncheckedCreateInput = {
    defaultImageId?: number
    url: string
    productIdForDefaultImage: number
  }

  export type DefaultImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutDefaultImageInput
  }

  export type DefaultImageUncheckedUpdateInput = {
    defaultImageId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    productIdForDefaultImage?: IntFieldUpdateOperationsInput | number
  }

  export type DefaultImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultImageUncheckedUpdateManyInput = {
    defaultImageId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    productIdForDefaultImage?: IntFieldUpdateOperationsInput | number
  }

  export type ImagesCreateInput = {
    url: string
    products: ProductCreateNestedOneWithoutImagesInput
  }

  export type ImagesUncheckedCreateInput = {
    imagesId?: number
    url: string
    productIdForImages: number
  }

  export type ImagesUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateOneRequiredWithoutImagesInput
  }

  export type ImagesUncheckedUpdateInput = {
    imagesId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    productIdForImages?: IntFieldUpdateOperationsInput | number
  }

  export type ImagesUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateManyInput = {
    imagesId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    productIdForImages?: IntFieldUpdateOperationsInput | number
  }

  export type SubCategoryCreateInput = {
    name: string
    products?: ProductCreateNestedManyWithoutSubCategoryInput
    category: CategoryCreateNestedOneWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedCreateInput = {
    subCategoryId?: number
    name: string
    categoryId: number
    products?: ProductUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateManyWithoutSubCategoryInput
    category?: CategoryUpdateOneRequiredWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedUpdateInput = {
    subCategoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    products?: ProductUncheckedUpdateManyWithoutSubCategoryInput
  }

  export type SubCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SubCategoryUncheckedUpdateManyInput = {
    subCategoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    subCategory?: SubCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    categoryId?: number
    name: string
    subCategory?: SubCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: SubCategoryUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subCategory?: SubCategoryUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type PrivilagiesRelationFilter = {
    is?: PrivilagiesWhereInput
    isNot?: PrivilagiesWhereInput
  }

  export type CartListRelationFilter = {
    every?: CartWhereInput
    some?: CartWhereInput
    none?: CartWhereInput
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type EnumValidateFilter = {
    equals?: Validate
    in?: Enumerable<Validate>
    notIn?: Enumerable<Validate>
    not?: NestedEnumValidateFilter | Validate
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type DefaultImageRelationFilter = {
    is?: DefaultImageWhereInput | null
    isNot?: DefaultImageWhereInput | null
  }

  export type ImagesListRelationFilter = {
    every?: ImagesWhereInput
    some?: ImagesWhereInput
    none?: ImagesWhereInput
  }

  export type SubCategoryRelationFilter = {
    is?: SubCategoryWhereInput
    isNot?: SubCategoryWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type SubCategoryListRelationFilter = {
    every?: SubCategoryWhereInput
    some?: SubCategoryWhereInput
    none?: SubCategoryWhereInput
  }

  export type PrivilagiesCreateNestedOneWithoutUserInput = {
    create?: XOR<PrivilagiesCreateWithoutUserInput, PrivilagiesUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrivilagiesCreateOrConnectWithoutUserInput
    connect?: PrivilagiesWhereUniqueInput
  }

  export type CartCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type CartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type PrivilagiesUpdateOneRequiredWithoutUserInput = {
    create?: XOR<PrivilagiesCreateWithoutUserInput, PrivilagiesUncheckedCreateWithoutUserInput>
    connectOrCreate?: PrivilagiesCreateOrConnectWithoutUserInput
    upsert?: PrivilagiesUpsertWithoutUserInput
    connect?: PrivilagiesWhereUniqueInput
    update?: XOR<PrivilagiesUpdateWithoutUserInput, PrivilagiesUncheckedUpdateWithoutUserInput>
  }

  export type CartUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type CartUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type UsersCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UsersCreateWithoutRoleInput>, Enumerable<UsersUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UsersCreateWithoutRoleInput>, Enumerable<UsersUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type UsersUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UsersCreateWithoutRoleInput>, Enumerable<UsersUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutRoleInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UsersCreateWithoutRoleInput>, Enumerable<UsersUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutRoleInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutCartInput = {
    create?: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutCartInput = {
    create?: XOR<ProductCreateWithoutCartInput, ProductUncheckedCreateWithoutCartInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartInput
    connect?: ProductWhereUniqueInput
  }

  export type EnumValidateFieldUpdateOperationsInput = {
    set?: Validate
  }

  export type UsersUpdateOneRequiredWithoutCartInput = {
    create?: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartInput
    upsert?: UsersUpsertWithoutCartInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutCartInput, UsersUncheckedUpdateWithoutCartInput>
  }

  export type ProductUpdateOneRequiredWithoutCartInput = {
    create?: XOR<ProductCreateWithoutCartInput, ProductUncheckedCreateWithoutCartInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartInput
    upsert?: ProductUpsertWithoutCartInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutCartInput, ProductUncheckedUpdateWithoutCartInput>
  }

  export type DefaultImageCreateNestedOneWithoutProductInput = {
    create?: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: DefaultImageCreateOrConnectWithoutProductInput
    connect?: DefaultImageWhereUniqueInput
  }

  export type ImagesCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ImagesCreateWithoutProductsInput>, Enumerable<ImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ImagesCreateOrConnectWithoutProductsInput>
    connect?: Enumerable<ImagesWhereUniqueInput>
  }

  export type SubCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<SubCategoryCreateWithoutProductsInput, SubCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SubCategoryCreateOrConnectWithoutProductsInput
    connect?: SubCategoryWhereUniqueInput
  }

  export type CartCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CartCreateWithoutProductInput>, Enumerable<CartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutProductInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type DefaultImageUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: DefaultImageCreateOrConnectWithoutProductInput
    connect?: DefaultImageWhereUniqueInput
  }

  export type ImagesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ImagesCreateWithoutProductsInput>, Enumerable<ImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ImagesCreateOrConnectWithoutProductsInput>
    connect?: Enumerable<ImagesWhereUniqueInput>
  }

  export type CartUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CartCreateWithoutProductInput>, Enumerable<CartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutProductInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type DefaultImageUpdateOneWithoutProductInput = {
    create?: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: DefaultImageCreateOrConnectWithoutProductInput
    upsert?: DefaultImageUpsertWithoutProductInput
    connect?: DefaultImageWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<DefaultImageUpdateWithoutProductInput, DefaultImageUncheckedUpdateWithoutProductInput>
  }

  export type ImagesUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ImagesCreateWithoutProductsInput>, Enumerable<ImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ImagesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ImagesUpsertWithWhereUniqueWithoutProductsInput>
    connect?: Enumerable<ImagesWhereUniqueInput>
    set?: Enumerable<ImagesWhereUniqueInput>
    disconnect?: Enumerable<ImagesWhereUniqueInput>
    delete?: Enumerable<ImagesWhereUniqueInput>
    update?: Enumerable<ImagesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ImagesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ImagesScalarWhereInput>
  }

  export type SubCategoryUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<SubCategoryCreateWithoutProductsInput, SubCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SubCategoryCreateOrConnectWithoutProductsInput
    upsert?: SubCategoryUpsertWithoutProductsInput
    connect?: SubCategoryWhereUniqueInput
    update?: XOR<SubCategoryUpdateWithoutProductsInput, SubCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CartUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CartCreateWithoutProductInput>, Enumerable<CartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutProductInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type DefaultImageUncheckedUpdateOneWithoutProductInput = {
    create?: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: DefaultImageCreateOrConnectWithoutProductInput
    upsert?: DefaultImageUpsertWithoutProductInput
    connect?: DefaultImageWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<DefaultImageUpdateWithoutProductInput, DefaultImageUncheckedUpdateWithoutProductInput>
  }

  export type ImagesUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ImagesCreateWithoutProductsInput>, Enumerable<ImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ImagesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ImagesUpsertWithWhereUniqueWithoutProductsInput>
    connect?: Enumerable<ImagesWhereUniqueInput>
    set?: Enumerable<ImagesWhereUniqueInput>
    disconnect?: Enumerable<ImagesWhereUniqueInput>
    delete?: Enumerable<ImagesWhereUniqueInput>
    update?: Enumerable<ImagesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ImagesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ImagesScalarWhereInput>
  }

  export type CartUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CartCreateWithoutProductInput>, Enumerable<CartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutProductInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type ProductCreateNestedOneWithoutDefaultImageInput = {
    create?: XOR<ProductCreateWithoutDefaultImageInput, ProductUncheckedCreateWithoutDefaultImageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDefaultImageInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutDefaultImageInput = {
    create?: XOR<ProductCreateWithoutDefaultImageInput, ProductUncheckedCreateWithoutDefaultImageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDefaultImageInput
    upsert?: ProductUpsertWithoutDefaultImageInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutDefaultImageInput, ProductUncheckedUpdateWithoutDefaultImageInput>
  }

  export type ProductCreateNestedOneWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    upsert?: ProductUpsertWithoutImagesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutSubCategoryInput>, Enumerable<ProductUncheckedCreateWithoutSubCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubCategoryInput>
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type CategoryCreateNestedOneWithoutSubCategoryInput = {
    create?: XOR<CategoryCreateWithoutSubCategoryInput, CategoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubCategoryInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductUncheckedCreateNestedManyWithoutSubCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutSubCategoryInput>, Enumerable<ProductUncheckedCreateWithoutSubCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubCategoryInput>
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type ProductUpdateManyWithoutSubCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutSubCategoryInput>, Enumerable<ProductUncheckedCreateWithoutSubCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubCategoryInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutSubCategoryInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutSubCategoryInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutSubCategoryInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type CategoryUpdateOneRequiredWithoutSubCategoryInput = {
    create?: XOR<CategoryCreateWithoutSubCategoryInput, CategoryUncheckedCreateWithoutSubCategoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubCategoryInput
    upsert?: CategoryUpsertWithoutSubCategoryInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutSubCategoryInput, CategoryUncheckedUpdateWithoutSubCategoryInput>
  }

  export type ProductUncheckedUpdateManyWithoutSubCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutSubCategoryInput>, Enumerable<ProductUncheckedCreateWithoutSubCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubCategoryInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutSubCategoryInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutSubCategoryInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutSubCategoryInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type SubCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<SubCategoryCreateWithoutCategoryInput>, Enumerable<SubCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<SubCategoryCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<SubCategoryWhereUniqueInput>
  }

  export type SubCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<SubCategoryCreateWithoutCategoryInput>, Enumerable<SubCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<SubCategoryCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<SubCategoryWhereUniqueInput>
  }

  export type SubCategoryUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<SubCategoryCreateWithoutCategoryInput>, Enumerable<SubCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<SubCategoryCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<SubCategoryUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<SubCategoryWhereUniqueInput>
    set?: Enumerable<SubCategoryWhereUniqueInput>
    disconnect?: Enumerable<SubCategoryWhereUniqueInput>
    delete?: Enumerable<SubCategoryWhereUniqueInput>
    update?: Enumerable<SubCategoryUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<SubCategoryUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<SubCategoryScalarWhereInput>
  }

  export type SubCategoryUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<SubCategoryCreateWithoutCategoryInput>, Enumerable<SubCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<SubCategoryCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<SubCategoryUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<SubCategoryWhereUniqueInput>
    set?: Enumerable<SubCategoryWhereUniqueInput>
    disconnect?: Enumerable<SubCategoryWhereUniqueInput>
    delete?: Enumerable<SubCategoryWhereUniqueInput>
    update?: Enumerable<SubCategoryUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<SubCategoryUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<SubCategoryScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumValidateFilter = {
    equals?: Validate
    in?: Enumerable<Validate>
    notIn?: Enumerable<Validate>
    not?: NestedEnumValidateFilter | Validate
  }

  export type PrivilagiesCreateWithoutUserInput = {
    role: Role
  }

  export type PrivilagiesUncheckedCreateWithoutUserInput = {
    roleId?: number
    role: Role
  }

  export type PrivilagiesCreateOrConnectWithoutUserInput = {
    where: PrivilagiesWhereUniqueInput
    create: XOR<PrivilagiesCreateWithoutUserInput, PrivilagiesUncheckedCreateWithoutUserInput>
  }

  export type CartCreateWithoutUserInput = {
    quantity: number
    validate?: Validate
    product: ProductCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutUserInput = {
    cartId?: number
    quantity: number
    validate?: Validate
    productId: number
  }

  export type CartCreateOrConnectWithoutUserInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type PrivilagiesUpsertWithoutUserInput = {
    update: XOR<PrivilagiesUpdateWithoutUserInput, PrivilagiesUncheckedUpdateWithoutUserInput>
    create: XOR<PrivilagiesCreateWithoutUserInput, PrivilagiesUncheckedCreateWithoutUserInput>
  }

  export type PrivilagiesUpdateWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type PrivilagiesUncheckedUpdateWithoutUserInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type CartUpsertWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type CartUpdateWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
  }

  export type CartUpdateManyWithWhereWithoutUserInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutCartInput>
  }

  export type CartScalarWhereInput = {
    AND?: Enumerable<CartScalarWhereInput>
    OR?: Enumerable<CartScalarWhereInput>
    NOT?: Enumerable<CartScalarWhereInput>
    cartId?: IntFilter | number
    quantity?: IntFilter | number
    validate?: EnumValidateFilter | Validate
    userId?: IntFilter | number
    productId?: IntFilter | number
  }

  export type UsersCreateWithoutRoleInput = {
    name: string
    username: string
    email: string
    password: string
    code?: number
    status?: Status
    cart?: CartCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutRoleInput = {
    userId?: number
    name: string
    username: string
    email: string
    password: string
    code?: number
    status?: Status
    cart?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutRoleInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutRoleInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
    create: XOR<UsersCreateWithoutRoleInput, UsersUncheckedCreateWithoutRoleInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutRoleInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutRoleInput, UsersUncheckedUpdateWithoutRoleInput>
  }

  export type UsersUpdateManyWithWhereWithoutRoleInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutUserInput>
  }

  export type UsersScalarWhereInput = {
    AND?: Enumerable<UsersScalarWhereInput>
    OR?: Enumerable<UsersScalarWhereInput>
    NOT?: Enumerable<UsersScalarWhereInput>
    userId?: IntFilter | number
    name?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
    code?: IntFilter | number
    status?: EnumStatusFilter | Status
  }

  export type UsersCreateWithoutCartInput = {
    name: string
    username: string
    email: string
    password: string
    code?: number
    status?: Status
    role?: PrivilagiesCreateNestedOneWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCartInput = {
    userId?: number
    name: string
    username: string
    email: string
    password: string
    roleId?: number
    code?: number
    status?: Status
  }

  export type UsersCreateOrConnectWithoutCartInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
  }

  export type ProductCreateWithoutCartInput = {
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    defaultImage?: DefaultImageCreateNestedOneWithoutProductInput
    images?: ImagesCreateNestedManyWithoutProductsInput
    subCategory: SubCategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutCartInput = {
    productId?: number
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    subCategoryId: number
    defaultImage?: DefaultImageUncheckedCreateNestedOneWithoutProductInput
    images?: ImagesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutCartInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCartInput, ProductUncheckedCreateWithoutCartInput>
  }

  export type UsersUpsertWithoutCartInput = {
    update: XOR<UsersUpdateWithoutCartInput, UsersUncheckedUpdateWithoutCartInput>
    create: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
  }

  export type UsersUpdateWithoutCartInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
    role?: PrivilagiesUpdateOneRequiredWithoutUserInput
  }

  export type UsersUncheckedUpdateWithoutCartInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type ProductUpsertWithoutCartInput = {
    update: XOR<ProductUpdateWithoutCartInput, ProductUncheckedUpdateWithoutCartInput>
    create: XOR<ProductCreateWithoutCartInput, ProductUncheckedCreateWithoutCartInput>
  }

  export type ProductUpdateWithoutCartInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUpdateOneWithoutProductInput
    images?: ImagesUpdateManyWithoutProductsInput
    subCategory?: SubCategoryUpdateOneRequiredWithoutProductsInput
  }

  export type ProductUncheckedUpdateWithoutCartInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUncheckedUpdateOneWithoutProductInput
    images?: ImagesUncheckedUpdateManyWithoutProductsInput
  }

  export type DefaultImageCreateWithoutProductInput = {
    url: string
  }

  export type DefaultImageUncheckedCreateWithoutProductInput = {
    defaultImageId?: number
    url: string
  }

  export type DefaultImageCreateOrConnectWithoutProductInput = {
    where: DefaultImageWhereUniqueInput
    create: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
  }

  export type ImagesCreateWithoutProductsInput = {
    url: string
  }

  export type ImagesUncheckedCreateWithoutProductsInput = {
    imagesId?: number
    url: string
  }

  export type ImagesCreateOrConnectWithoutProductsInput = {
    where: ImagesWhereUniqueInput
    create: XOR<ImagesCreateWithoutProductsInput, ImagesUncheckedCreateWithoutProductsInput>
  }

  export type SubCategoryCreateWithoutProductsInput = {
    name: string
    category: CategoryCreateNestedOneWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedCreateWithoutProductsInput = {
    subCategoryId?: number
    name: string
    categoryId: number
  }

  export type SubCategoryCreateOrConnectWithoutProductsInput = {
    where: SubCategoryWhereUniqueInput
    create: XOR<SubCategoryCreateWithoutProductsInput, SubCategoryUncheckedCreateWithoutProductsInput>
  }

  export type CartCreateWithoutProductInput = {
    quantity: number
    validate?: Validate
    user: UsersCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutProductInput = {
    cartId?: number
    quantity: number
    validate?: Validate
    userId: number
  }

  export type CartCreateOrConnectWithoutProductInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutProductInput, CartUncheckedCreateWithoutProductInput>
  }

  export type DefaultImageUpsertWithoutProductInput = {
    update: XOR<DefaultImageUpdateWithoutProductInput, DefaultImageUncheckedUpdateWithoutProductInput>
    create: XOR<DefaultImageCreateWithoutProductInput, DefaultImageUncheckedCreateWithoutProductInput>
  }

  export type DefaultImageUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultImageUncheckedUpdateWithoutProductInput = {
    defaultImageId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUpsertWithWhereUniqueWithoutProductsInput = {
    where: ImagesWhereUniqueInput
    update: XOR<ImagesUpdateWithoutProductsInput, ImagesUncheckedUpdateWithoutProductsInput>
    create: XOR<ImagesCreateWithoutProductsInput, ImagesUncheckedCreateWithoutProductsInput>
  }

  export type ImagesUpdateWithWhereUniqueWithoutProductsInput = {
    where: ImagesWhereUniqueInput
    data: XOR<ImagesUpdateWithoutProductsInput, ImagesUncheckedUpdateWithoutProductsInput>
  }

  export type ImagesUpdateManyWithWhereWithoutProductsInput = {
    where: ImagesScalarWhereInput
    data: XOR<ImagesUpdateManyMutationInput, ImagesUncheckedUpdateManyWithoutImagesInput>
  }

  export type ImagesScalarWhereInput = {
    AND?: Enumerable<ImagesScalarWhereInput>
    OR?: Enumerable<ImagesScalarWhereInput>
    NOT?: Enumerable<ImagesScalarWhereInput>
    imagesId?: IntFilter | number
    url?: StringFilter | string
    productIdForImages?: IntFilter | number
  }

  export type SubCategoryUpsertWithoutProductsInput = {
    update: XOR<SubCategoryUpdateWithoutProductsInput, SubCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<SubCategoryCreateWithoutProductsInput, SubCategoryUncheckedCreateWithoutProductsInput>
  }

  export type SubCategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedUpdateWithoutProductsInput = {
    subCategoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CartUpsertWithWhereUniqueWithoutProductInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutProductInput, CartUncheckedUpdateWithoutProductInput>
    create: XOR<CartCreateWithoutProductInput, CartUncheckedCreateWithoutProductInput>
  }

  export type CartUpdateWithWhereUniqueWithoutProductInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutProductInput, CartUncheckedUpdateWithoutProductInput>
  }

  export type CartUpdateManyWithWhereWithoutProductInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutCartInput>
  }

  export type ProductCreateWithoutDefaultImageInput = {
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    images?: ImagesCreateNestedManyWithoutProductsInput
    subCategory: SubCategoryCreateNestedOneWithoutProductsInput
    cart?: CartCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutDefaultImageInput = {
    productId?: number
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    subCategoryId: number
    images?: ImagesUncheckedCreateNestedManyWithoutProductsInput
    cart?: CartUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutDefaultImageInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutDefaultImageInput, ProductUncheckedCreateWithoutDefaultImageInput>
  }

  export type ProductUpsertWithoutDefaultImageInput = {
    update: XOR<ProductUpdateWithoutDefaultImageInput, ProductUncheckedUpdateWithoutDefaultImageInput>
    create: XOR<ProductCreateWithoutDefaultImageInput, ProductUncheckedCreateWithoutDefaultImageInput>
  }

  export type ProductUpdateWithoutDefaultImageInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    images?: ImagesUpdateManyWithoutProductsInput
    subCategory?: SubCategoryUpdateOneRequiredWithoutProductsInput
    cart?: CartUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutDefaultImageInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
    images?: ImagesUncheckedUpdateManyWithoutProductsInput
    cart?: CartUncheckedUpdateManyWithoutProductInput
  }

  export type ProductCreateWithoutImagesInput = {
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    defaultImage?: DefaultImageCreateNestedOneWithoutProductInput
    subCategory: SubCategoryCreateNestedOneWithoutProductsInput
    cart?: CartCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagesInput = {
    productId?: number
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    subCategoryId: number
    defaultImage?: DefaultImageUncheckedCreateNestedOneWithoutProductInput
    cart?: CartUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutImagesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpsertWithoutImagesInput = {
    update: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUpdateOneWithoutProductInput
    subCategory?: SubCategoryUpdateOneRequiredWithoutProductsInput
    cart?: CartUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutImagesInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    subCategoryId?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUncheckedUpdateOneWithoutProductInput
    cart?: CartUncheckedUpdateManyWithoutProductInput
  }

  export type ProductCreateWithoutSubCategoryInput = {
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    defaultImage?: DefaultImageCreateNestedOneWithoutProductInput
    images?: ImagesCreateNestedManyWithoutProductsInput
    cart?: CartCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSubCategoryInput = {
    productId?: number
    name: string
    price: number
    rating: number
    description: string
    codeProd: string
    quantity: number
    defaultImage?: DefaultImageUncheckedCreateNestedOneWithoutProductInput
    images?: ImagesUncheckedCreateNestedManyWithoutProductsInput
    cart?: CartUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSubCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSubCategoryInput, ProductUncheckedCreateWithoutSubCategoryInput>
  }

  export type CategoryCreateWithoutSubCategoryInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutSubCategoryInput = {
    categoryId?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutSubCategoryInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSubCategoryInput, CategoryUncheckedCreateWithoutSubCategoryInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutSubCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutSubCategoryInput, ProductUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<ProductCreateWithoutSubCategoryInput, ProductUncheckedCreateWithoutSubCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutSubCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutSubCategoryInput, ProductUncheckedUpdateWithoutSubCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutSubCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    productId?: IntFilter | number
    name?: StringFilter | string
    price?: IntFilter | number
    rating?: IntFilter | number
    description?: StringFilter | string
    codeProd?: StringFilter | string
    quantity?: IntFilter | number
    subCategoryId?: IntFilter | number
  }

  export type CategoryUpsertWithoutSubCategoryInput = {
    update: XOR<CategoryUpdateWithoutSubCategoryInput, CategoryUncheckedUpdateWithoutSubCategoryInput>
    create: XOR<CategoryCreateWithoutSubCategoryInput, CategoryUncheckedCreateWithoutSubCategoryInput>
  }

  export type CategoryUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutSubCategoryInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SubCategoryCreateWithoutCategoryInput = {
    name: string
    products?: ProductCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedCreateWithoutCategoryInput = {
    subCategoryId?: number
    name: string
    products?: ProductUncheckedCreateNestedManyWithoutSubCategoryInput
  }

  export type SubCategoryCreateOrConnectWithoutCategoryInput = {
    where: SubCategoryWhereUniqueInput
    create: XOR<SubCategoryCreateWithoutCategoryInput, SubCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SubCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SubCategoryWhereUniqueInput
    update: XOR<SubCategoryUpdateWithoutCategoryInput, SubCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<SubCategoryCreateWithoutCategoryInput, SubCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SubCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SubCategoryWhereUniqueInput
    data: XOR<SubCategoryUpdateWithoutCategoryInput, SubCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type SubCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: SubCategoryScalarWhereInput
    data: XOR<SubCategoryUpdateManyMutationInput, SubCategoryUncheckedUpdateManyWithoutSubCategoryInput>
  }

  export type SubCategoryScalarWhereInput = {
    AND?: Enumerable<SubCategoryScalarWhereInput>
    OR?: Enumerable<SubCategoryScalarWhereInput>
    NOT?: Enumerable<SubCategoryScalarWhereInput>
    subCategoryId?: IntFilter | number
    name?: StringFilter | string
    categoryId?: IntFilter | number
  }

  export type CartUpdateWithoutUserInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    product?: ProductUpdateOneRequiredWithoutCartInput
  }

  export type CartUncheckedUpdateWithoutUserInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type CartUncheckedUpdateManyWithoutCartInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUpdateWithoutRoleInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
    cart?: CartUpdateManyWithoutUserInput
  }

  export type UsersUncheckedUpdateWithoutRoleInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
    cart?: CartUncheckedUpdateManyWithoutUserInput
  }

  export type UsersUncheckedUpdateManyWithoutUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type ImagesUpdateWithoutProductsInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateWithoutProductsInput = {
    imagesId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateManyWithoutImagesInput = {
    imagesId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CartUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    user?: UsersUpdateOneRequiredWithoutCartInput
  }

  export type CartUncheckedUpdateWithoutProductInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    validate?: EnumValidateFieldUpdateOperationsInput | Validate
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpdateWithoutSubCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUpdateOneWithoutProductInput
    images?: ImagesUpdateManyWithoutProductsInput
    cart?: CartUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutSubCategoryInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    defaultImage?: DefaultImageUncheckedUpdateOneWithoutProductInput
    images?: ImagesUncheckedUpdateManyWithoutProductsInput
    cart?: CartUncheckedUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateManyWithoutProductsInput = {
    productId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    codeProd?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SubCategoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateManyWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedUpdateWithoutCategoryInput = {
    subCategoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutSubCategoryInput
  }

  export type SubCategoryUncheckedUpdateManyWithoutSubCategoryInput = {
    subCategoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}